cCOMPILE_UNIT ::=			PROGRAM | MODULE+
cPROGRAM ::=				shebang HEADER SUBROUTINE* OPERATION+
cMODULE ::=					PACKAGE | CLASS
cPACKAGE ::=				package _word_scoped scolon HEADER SUBROUTINE+ _number_one scolon
 HEADER ::=					use strict scolon use warnings scolon our dollar VERSION equal _version scolon use carp scolon use rperl scolon INCLUDE* CONSTANT*
-INCLUDE ::=				use _word_scoped scolon | use _word_scoped qw lparen _word+ rparen scolon
-CONSTANT ::=				use constant _word fat_arrow CONSTANT_VALUE scolon
 CONSTANT_VALUE ::=			_literal | lbracket _literal (comma _literal)* rbracket | lbrace _word fat_arrow _literal (comma _word fat_arrow _literal)* rbrace
cSUBROUTINE ::=				our _type _variable_symbol equal sub lbrace SUBROUTINE_ARGUMENTS? OPERATION+ rbrace scolon
 SUBROUTINE_ARGUMENTS ::=	lparen my _type _variable_symbol (comma my _type _variable_symbol)* rparen equal at_underscore scolon

cOPERATION ::=				EXPRESSION scolon | STATEMENT
cOPERATOR ::=				_operator_symbol_pre LIST_ELEMENTS? | _operator_symbol_pre lparen LIST_ELEMENTS? rparen | EXPRESSION _operator_symbol_in EXPRESSION | VARIABLE _operator_symbol_post
cOPERATOR_VOID ::=			_operator_symbol_void LIST_ELEMENTS? scolon | _operator_symbol_void lparen LIST_ELEMENTS? rparen scolon
cEXPRESSION ::=				_literal | VARIABLE | lbracket LIST_ELEMENTS? rbracket | lbrace HASH_ENTRIES? rbrace |
							OPERATOR | _word_scoped lparen LIST_ELEMENTS? rparen | VARIABLE thin_arrow _word lparen LIST_ELEMENTS? rparen | lparen EXPRESSION rparen
cSTATEMENT ::=				CONDITIONAL | (_loop_label colon)? LOOP | OPERATOR_VOID | VARIABLE_DECLARATION | VARIABLE_MODIFICATION
cCONDITIONAL ::=			if lparen EXPRESSION rparen CODE_BLOCK (elsif lparen EXPRESSION rparen CODE_BLOCK)* (else CODE_BLOCK)?
cLOOP ::=					LOOP_FOR | LOOP_FOREACH | LOOP_WHILE
cLOOP_FOR ::=				for my integer _variable_symbol lparen EXPRESSION dot_dot EXPRESSION rparen CODE_BLOCK
cLOOP_FOREACH ::=			foreach my _type _variable_symbol lparen LIST_ELEMENTS rparen CODE_BLOCK
cLOOP_WHILE ::=				while lparen EXPRESSION rparen CODE_BLOCK
cCODE_BLOCK ::=				lbrace OPERATION+ rbrace

cVARIABLE ::=				_variable_symbol VARIABLE_RETRIEVAL*
 VARIABLE_RETRIEVAL ::=		thin_arrow lbracket EXPRESSION rbracket | thin_arrow lbrace EXPRESSION rbrace
cVARIABLE_DECLARATION ::=	my _type _variable_symbol scolon | my _type _variable_symbol equal EXPRESSION scolon
cVARIABLE_MODIFICATION ::=	VARIABLE equal EXPRESSION scolon
cLIST_ELEMENTS ::=			LIST_ELEMENT_VALUE (comma LIST_ELEMENT_VALUE)* 
 LIST_ELEMENT_VALUE ::=		EXPRESSION | at lbrace VARIABLE rbrace | keys_or_values percent lbrace VARIABLE rbrace
 HASH_ENTRIES ::=			_word fat_arrow HASH_ENTRY_VALUE (comma _word fat_arrow HASH_ENTRY_VALUE)* 
 HASH_ENTRY_VALUE ::=		EXPRESSION | percent lbrace VARIABLE rbrace

cCLASS ::=				package _word_scoped scolon HEADER use parent qw lparen _word_scoped+ rparen scolon PROPERTIES METHOD* _number_one scolon (SUBROUTINE+ _number_one scolon)?
cPROPERTIES ::=			our percent properties equal lparen HASH_ENTRIES? rparen scolon
cMETHOD ::=				our _type _variable_symbol equal sub lbrace METHOD_ARGUMENTS? OPERATION+ rbrace scolon
 METHOD_ARGUMENTS ::=	lparen my _type_class_or_self (comma my _type _variable_symbol)* rparen equal at_underscore scolon

 X? ::=						X | EMPTY
 X+ ::=						X* X
 X* ::=						X* X | EMPTY