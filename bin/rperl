#!/usr/bin/perl
use strict;
use warnings;
use RPerl;
our $VERSION = 0.003_001;

## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls) # USER DEFAULT 1: allow numeric values and print operator
## no critic qw(ProhibitBooleanGrep)  # SYSTEM SPECIAL 1: allow grep

use RPerl::Parser;    # includes Perl::Critic
use RPerl::Translator;
use RPerl::Generator;
use RPerl::Compiler;    # includes Inline
use Getopt::Long;

# move output away from initial Inline compiler output
RPerl::diag "\n\n" or croak();

# [[[ ACCEPT COMMAND-LINE ARGUMENTS ]]]
# [[[ ACCEPT COMMAND-LINE ARGUMENTS ]]]
# [[[ ACCEPT COMMAND-LINE ARGUMENTS ]]]

my string__array_ref $rperl_input_file_names = [];
my string__array_ref $cpp_output_file_names  = [];
my integer $option_number                    = 0;
my $mode = {};    # can't store defaults here, erased by GetOptions()
my $mode_default = { ops => 'CPP', types => 'CPP' }; # default to CPPOPS_CPPTYPES
my $modes_supported = { ops => ['CPP'], types => [ 'PERL', 'CPP' ] };
GetOptions(
    'infile=s{1,}'  => \$rperl_input_file_names,
    'outfile=s{1,}' => \$cpp_output_file_names,
    'mode=s%'       => \$mode,
    '<>'            => \&accept_unlabeled_options
    )
    or croak(
    "\nERROR EARG00: Failure processing command line arguments,\ncroaking");

if ( ( scalar @{$rperl_input_file_names} ) == 0 ) {
    croak(
        "\nERROR EARG01: No RPerl source code input file(s) specified,\ncroaking"
    );
}

# check input file(s)
my integer $rperl_input_file_num = scalar @{$rperl_input_file_names};
for my integer $i ( 0 .. $rperl_input_file_num ) {
    my string $rperl_input_file_name = $rperl_input_file_names->[$i];
    RPerl::diag 'in rperl, top of file checking loop ' . $i . ' of ' . $rperl_input_file_num . ", have \$rperl_input_file_names->[$i] = '" . $rperl_input_file_name . "'\n";

    if ( not( -e $rperl_input_file_name ) ) { ## no critic qw(ProhibitCascadingIfElse)  # SYSTEM DEFAULT 3: allow argument-handling logic
        croak(
            "\nERROR EARG02: Specified RPerl source code input file '$rperl_input_file_name' does not exist,\ncroaking"
        );
    }
    elsif ( not( -r $rperl_input_file_name ) ) {
        croak(
            "\nERROR EARG03: Specified RPerl source code input file '$rperl_input_file_name' is not readable,\ncroaking"
        );
    }
    elsif ( not( -f $rperl_input_file_name ) ) {
        croak(
            "\nERROR EARG04: Specified RPerl source code input file '$rperl_input_file_name' is not a plain file,\ncroaking"
        );
    }
    elsif ( $rperl_input_file_name !~ /[.]pm$/xms ) {
        croak(
            "\nERROR EARG05: Specified RPerl source code input file '$rperl_input_file_name' is not a Perl module ending in '.pm',\ncroaking"
        );
    }

    # automatically generate output file name(s) if not provided
    if ( not( defined $cpp_output_file_names->[$i] ) ) {
        $cpp_output_file_names->[$i] = $rperl_input_file_name;
        substr $cpp_output_file_names->[$i], -3, 4, '.cpp';
    }
 
    RPerl::diag 'in rperl, bottom of file checking loop ' . $i . ' of ' . $rperl_input_file_num . ", have \$cpp_output_file_names->[$i] = '" . $cpp_output_file_names->[$i] . "'\n";
}

# check modes
foreach my string $mode_key ( keys %{$mode} ) {
    if ( not( exists $modes_supported->{$mode_key} ) ) {
        croak(
            "\nERROR EARG06: Unsupported or invalid mode category '$mode_key' specified, supported categories are ("
                . join( ', ', keys %{$modes_supported} )
                . "),\ncroaking" );
    }
    elsif (
        not( grep { $_ eq $mode->{$mode_key} }
            @{ $modes_supported->{$mode_key} } )
        )
    {
        croak(    "\nERROR EARG07: Unsupported or invalid mode '"
                . $mode->{$mode_key}
                . "' in mode category '$mode_key' specified, supported modes are ("
                . join( ', ', @{ $modes_supported->{$mode_key} } )
                . "),\ncroaking" );
    }
}

# accept modes
foreach my string $mode_default_key ( keys %{$mode_default} ) { ## no critic qw(ProhibitPostfixControls)  # SYSTEM SPECIAL 7: PERL CRITIC UNFILED ISSUE, not postfix foreach
    if ( not( exists $mode->{$mode_default_key} ) ) {
        $mode->{$mode_default_key} = $mode_default->{$mode_default_key};
    }
}
RPerl::diag "in rperl, have \$mode = \n" . Dumper($mode) . "\n";

# allow omission of "-infile" & "-outfile" on command line
sub accept_unlabeled_options {

#our void $accept_unlabeled_options = sub {  # NEED FIX: can't define RPerl-style subroutines here?
    ( my unknown $option ) = @_;

    if ( $option_number == 0 ) {
        $rperl_input_file_name = $option;
    }
    elsif ( $option_number == 1 ) {
        $cpp_output_file_name = $option;
    }

#    elsif ( $option_number == 2 ) { $mode = $option; }  # NEED UPGRADE: ability to omit "--mode" on command line, accept multiple input files
    $option_number++;
}

# [[[ COMPILE RPERL TO XS & BINARY ]]]
# [[[ COMPILE RPERL TO XS & BINARY ]]]
# [[[ COMPILE RPERL TO XS & BINARY ]]]

rperl_to_xsbinary__compile( $rperl_input_file_name, $cpp_output_file_name,
    $mode );
