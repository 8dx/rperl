%{
    use strict;
    use warnings;
    our $VERSION = 0.000_734;
    use Carp;
    
    use rperlrules;  # affirmative, it totally does
%}

%strict                         # require all tokens to be declared, etc.
%tree                           # automatically create AST

%whites /(\s*(?:#[^#\!].*)?\s*)/  # whitespace is actual whitespace and normal comments, not shebang or double-hash critics

%defaultaction {
    my $self = shift;
    my $name = $self->YYName();
    bless { children => [ @_ ] }, $name;
}

#%token SHEBANG              = /(^(\#\!\/[\w\/]*\/perl)$)/               # begin line, hash (octothorpe), bang, *NIX path to Perl, end line; ex. '#!/usr/bin/perl'
%token USE_STRICT           = /(use\ strict\;)/
%token USE_WARNINGS         = /(use\ warnings\;)/
%token USE_RPERL            = /(use\ RPerl\;)/
%token USE_CONSTANT         = /(use\ constant)/
%token USE_PARENT           = /(use\ parent)/
%token VERSION_NUMBER_ASSIGN = /\$VERSION\ \=\ (\d\d?\.\d{3}\_\d{3});/  # match assign match, only capture & return number; ex. '$VERSION = 12.345_678;' returns '12.345_678'
%token LITERAL_NUMBER       = /(-?(((\d{1,2}_)?(\d{3}_)*\d{3})|\d{1,2})(\.((\d{3}(_\d{3})*(_\d{1,2})?)|\d{1,2}))?)/   # number w/ underscores
%token LITERAL_STRING       = /(('[^']+')|("[^"\@\$]*((\\n)|(\\t))+[^"\@\$]*")|(q{[^}]*}))/  # strings: single quotes non-empty; double quotes non-empty w/out sigils & w/ newline or tab; or single q-braces
%token VARIABLE_SYMBOL      = /(\$[a-zA-Z]\w*(::)*\w*)/                 # dollar sigil, scoped word
%token KEYS_OR_VALUES       = /(keys|values)/                           # 'keys' or 'values'
%token TYPE_CLASS_OR_SELF   = /(string\s+\$class|object\s+\$self)/      # ex. 'string $class' or 'object $self'
%token CHECK_OR_CHECKTRACE  = /(::[a-zA-Z]\w*__CHECK(TRACE)?)/          # ex. 'integer__array_ref__CHECK' or 'integer__array_ref__CHECKTRACE'

# PRECEDENCE, LEXICAL ORDERING: earlier declaration gets tried first;  http://perldoc.perl.org/perlop.html#Operator-Precedence-and-Associativity [1]
%token OP24_LOGICAL_OR_XOR      = /(or|xor)/                    # precedence 24 infix: logical or and xor, equivalent to || except for precedence
%token OP23_LOGICAL_AND         = /(and)/                       # precedence 23 infix: logical and, equivalent to && except for precedence
%token OP22_LOGICAL_NOT         = /(not)/                       # precedence 22 prefix: logical negation, equivalent to ! except for precedence
%token OP21_LIST_COMMA          = /(,)/                         # precedence 21 infix: "list operators (rightward)" [1] AKA comma
%token OP20_HASH_FATARROW       = /(=>)/                        # precedence 20 infix: hash entry fat arrow AKA fat comma
%token OP19_LOOP_CONTROL        = /(next|last)/                 # precedence 19 prefix void: loop control next, last
%token OP18_TERNARY             = /(\?)/                        # precedence 18 infix: ternary conditional
%token OP17_LIST_RANGE          = /(\.\.)/                      # precedence 17 infix: range
%token OP16_LOGICAL_OR          = /(\|\|)/                      # precedence 16 infix: logical or
%token OP15_LOGICAL_AND         = /(&&)/                        # precedence 15 infix: logical and
%token OP14_BITWISE_OR_XOR      = /(\||\^)/                     # precedence 14 infix: bitwise or, bitwise xor
%token OP13_BITWISE_AND         = /(&)/                         # precedence 13 infix: bitwise and
%token OP12_COMPARE_EQ_NEQ      = /(==|!=|eq|ne)/               # precedence 12 infix: comparison numeric equal, numeric not equal, string equal, string not equal
%token OP09_BITWISE_SHIFT       = /(<<|>>)/                     # precedence 09 infix: bitwise shift left, shift right
%token OP10_NAMED_UNARY         = /(scalar)/                    # precedence 10 prefix: "named unary operators" [1]; ex. 'chdir' and 'rand'; NEED FIX: hard-code names
#%token OP10_NAMED_UNARY_STRINGIFY = /([a-zA-Z]\w*__stringify)/  # precedence 10 prefix: stringify AKA pretty print; ex. 'integer__array_ref__stringify'
%token OP10_NAMED_UNARY_STRINGIFY = /(::[a-zA-Z]\w*__stringify)/  # precedence 10 prefix: stringify AKA pretty print; ex. 'integer__array_ref__stringify'
%token OP08_STRING_CAT          = /(\.)/                        # precedence 08 infix: string concatenate
%token OP03_MATH_INC_DEC        = /(\+\+|--)/                   # precedence 03 prefix and postfix: increment, decrement
%token OP04_MATH_POW            = /(\*\*)/                      # precedence 04 infix: arithmetic exponent AKA power
%token OP07_MATH_MULT_DIV_MOD   = /(\*|\/|\%)/                  # precedence 07 infix: arithmetic multiply, divide, modulo
#%token OP06_REGEX_PATTERN       = /(m\/.*\/xms)/                    # precedence 06 infix: regular expression pattern
%token OP06_REGEX_PATTERN       = /(HOWDYHOWDYHOWDY)/                    # precedence 06 infix: regular expression pattern
%token OP06_REGEX_MATCH         = /(=\~|!\~)/                   # precedence 06 infix: regular expression match, not match
%token OP19_VARIABLE_ASSIGN_BY  = /(\+=|-=|\*=|\/=)/            # precedence 19 infix: add assign, subtract assign, multiply assign, divide assign
%token OP19_VARIABLE_ASSIGN     = /(=)/                         # precedence 19 infix: assign
%token OP05_LOGICAL_NEG         = /(!)/                         # precedence 05 prefix: logical negation, negative
%token OP02_HASH_THINARROW      = /(->\{)/                      # precedence 02 infix: thin arrow, hash dereference and retrieval
%token OP02_ARRAY_THINARROW     = /(->\[)/                      # precedence 02 infix: thin arrow, array dereference and retrieval
%token OP02_METHOD_THINARROW    = /(->)/                        # precedence 02 infix: thin arrow, method dereference and call
%token OP05_MATH_NEG            = /(-\()/                       # precedence 05 prefix: arithmetic negative
%token OP08_MATH_ADD_SUB        = /(\+|-)/                      # precedence 08 infix: arithmetic add, subtract
%token OP11_COMPARE_LT_GT       = /(<|>|<=|>=|lt|gt|le|ge)/     # precedence 11 infix: comparison less than, greater than, less or equal, greater or equal
%token OP01_NAMED_VOID_PAREN    = /((print|croak|return|exit)\s*\()/   # precedence 01 prefix void: no return value or context
%token OP01_NAMED_VOID          = /(print|croak|return|exit)/   # precedence 01 prefix void: no return value or context
%token OP01_NAMED_QW            = /(qw)/                        # precedence 01 prefix qw: quoted words
%token OP01_NAMED               = /(sin|cos|tan)/               # precedence 01 prefix: "terms and list operators (leftward)" [1] AKA builtins; NEED FIX: hard-code names

# PRECEDENCE, SYNTAX ASSOCIATIVITY: later declaration gets higher priority
%left       OP24_LOGICAL_OR_XOR
%left       OP23_LOGICAL_AND
%right      OP22_LOGICAL_NOT
%nonassoc   OP21_LIST_COMMA
%left       OP20_HASH_FATARROW
%right      OP19_LOOP_CONTROL
%right      OP19_VARIABLE_ASSIGN_BY
%right      OP19_VARIABLE_ASSIGN
%right      OP18_TERNARY
%nonassoc   OP17_LIST_RANGE
%left       OP16_LOGICAL_OR
%left       OP15_LOGICAL_AND
%left       OP14_BITWISE_OR_XOR
%left       OP13_BITWISE_AND
%nonassoc   OP12_COMPARE_EQ_NEQ
%nonassoc   OP11_COMPARE_LT_GT
%nonassoc   OP10_NAMED_UNARY
%nonassoc   OP10_NAMED_UNARY_STRINGIFY
%left       OP09_BITWISE_SHIFT
%left       OP08_STRING_CAT
%left       OP08_MATH_ADD_SUB
%left       OP07_MATH_MULT_DIV_MOD
%left       OP06_REGEX_MATCH
%left       OP06_REGEX_PATTERN
%right      OP05_MATH_NEG
%right      OP05_LOGICAL_NEG
%right      OP04_MATH_POW
%nonassoc   OP03_MATH_INC_DEC
%left       OP02_HASH_THINARROW
%left       OP02_ARRAY_THINARROW
%left       OP02_METHOD_THINARROW
%left       OP01_NAMED
%left       OP01_NAMED_QW
%left       OP01_NAMED_VOID
%left       OP01_NAMED_VOID_PAREN

%token WORD_SCOPED          = /(([a-zA-Z]\w*(::[a-zA-Z]\w*)+)|(::[a-zA-Z]\w*(::[a-zA-Z]\w*)*))/
%token WORD                 = /([a-zA-Z]\w*)/                       # letter followed by letters, numbers, and underscores; ex. 'foobar_42_Howdy'
%token COLON                = /:/

%%

                        # NEED FIX: add Critic on first separate line before 'package', and on first same line after SHEBANG
CompileUnit:            Program | Module+ ;
#Program:                SHEBANG Header Critic* Include* Constant* Subroutine* Operation+ ;
Program:                '#!/usr/bin/perl' Header Critic* Include* Constant* Subroutine* Operation+ ;
Module:                 Package | Class ;
Package:                'package' WordScoped ';' Header Critic* Include* Constant* Subroutine+ '1;' '1;' ;
#Header:                 'use strict;' 'use warnings;' 'use RPerl;' 'our' VERSION_NUMBER_ASSIGN;
Header:                 USE_STRICT USE_WARNINGS USE_RPERL'our' VERSION_NUMBER_ASSIGN;
Critic:                 '## no critic qw(' WORD+ ')';
Include:                'fuse' WordScoped ';' | 'fuse' WordScoped 'qw(' WORD+ ')' ';' ;
                        # NEED FIX: disable non-scalar constants
#Constant:               'use constant' WORD OP20_HASH_FATARROW TypeInner ConstantValue ';' ;
Constant:               USE_CONSTANT WORD OP20_HASH_FATARROW TypeInner ConstantValue ';' ;
ConstantValue:          Literal | '[' TypeInner? Literal (OP21_LIST_COMMA TypeInner? Literal)* ']' | 
                        '{' WORD OP20_HASH_FATARROW TypeInner? Literal (OP21_LIST_COMMA WORD OP20_HASH_FATARROW TypeInner? Literal)* '}' ;
Subroutine:             'our' Type VARIABLE_SYMBOL '= sub {' SubroutineArguments? Operation+ '}' ';' ;
SubroutineArguments:    '( my' Type VARIABLE_SYMBOL (OP21_LIST_COMMA 'my' Type VARIABLE_SYMBOL)* ')' OP19_VARIABLE_ASSIGN '@_;' ArgumentCheck* ;
#ArgumentCheck:          '::' CHECK_OR_CHECKTRACE '(' Expression (OP21_LIST_COMMA Expression OP21_LIST_COMMA Expression)? ')' ';' ;
ArgumentCheck:          CHECK_OR_CHECKTRACE '(' Expression (OP21_LIST_COMMA Expression OP21_LIST_COMMA Expression)? ')' ';' ;
#Class:                  'package' WordScoped ';' Header 'use parent qw(' WordScoped ')' ';' Include Critic* Include* Constant* Properties Method* '1;' '1;' (Subroutine+ '1;' '1;')? ;
Class:                  'package' WordScoped ';' Header USE_PARENT 'qw(' WordScoped ')' ';' Include Critic* Include* Constant* Properties Method* '1;' '1;' (Subroutine+ '1;' '1;')? ;
                        # NEED FIX: add %properties_class as in RPerl::Operation::Statement::OperatorVoid::Return
Properties:             'our %properties = (' HashEntryTyped (OP21_LIST_COMMA HashEntryTyped)* ')' ';' | 'our %properties = (' ')' ';';
Method:                 'our' Type VARIABLE_SYMBOL '= sub {' MethodArguments? Operation+ '}' ';' ;
MethodArguments:        '( my' TYPE_CLASS_OR_SELF (OP21_LIST_COMMA 'my' Type VARIABLE_SYMBOL)* ')' OP19_VARIABLE_ASSIGN '@_;' ArgumentCheck* ;

Operation:              Expression ';' | Statement ;
Operator:               OP01_NAMED '(' ListElements? ')' | OP03_MATH_INC_DEC Variable | Variable OP03_MATH_INC_DEC | Expression OP04_MATH_POW Expression | 
                        OP05_LOGICAL_NEG Expression | OP05_MATH_NEG Expression ')' | Expression OP06_REGEX_MATCH '/' OP06_REGEX_PATTERN '/' |
                        Expression OP07_MATH_MULT_DIV_MOD Expression | Expression OP08_MATH_ADD_SUB Expression | Expression OP08_STRING_CAT Expression | 
#                        Expression OP09_BITWISE_SHIFT Expression | OP10_NAMED_UNARY Expression | '::' OP10_NAMED_UNARY_STRINGIFY Expression | 
                        Expression OP09_BITWISE_SHIFT Expression | OP10_NAMED_UNARY Expression | OP10_NAMED_UNARY_STRINGIFY Expression | 
                        Expression OP11_COMPARE_LT_GT Expression | 
                        Expression OP12_COMPARE_EQ_NEQ Expression | Expression OP13_BITWISE_AND Expression | Expression OP14_BITWISE_OR_XOR Expression | 
                        Expression OP15_LOGICAL_AND Expression | Expression OP16_LOGICAL_OR Expression | Expression OP17_LIST_RANGE Expression | 
                        Expression OP18_TERNARY Variable COLON Variable | OP22_LOGICAL_NOT Expression | Expression OP23_LOGICAL_AND Expression | 
                        Expression OP24_LOGICAL_OR_XOR Expression ;
                        # NEED FIX: are open() and close() ops truly void?  if not, need add FileHandle to non-void Operator production
OperatorVoid:           OP01_NAMED_VOID_PAREN ListElements? ')' ';' | OP01_NAMED_VOID_PAREN FileHandle ListElements? ')' ';' | 
                        OP01_NAMED_VOID ListElements? ';' | OP01_NAMED_VOID FileHandle ListElements? ';' | OP19_LOOP_CONTROL LoopLabel ';' ;
Expression:             'undef' | Literal | Variable | ArrayReference | ArrayDereferenced | HashReference | HashDereferenced | '{' '}' |
                        Operator | WordScoped '(' ListElements? ')' | Variable OP02_METHOD_THINARROW WORD '(' ListElements? ')' | '(' Expression ')' ;
ExpressionOrStdin:      Expression | '<STDIN>';
Statement:              Conditional | (LoopLabel COLON)? Loop | OperatorVoid | VariableDeclaration | VariableModification ;
Conditional:            'if (' Expression ')' CodeBlock ('elsif (' Expression ')' CodeBlock)* ('else' CodeBlock)? ;
Loop:                   LoopFor | LoopForEach | LoopWhile ;
LoopFor:                'for my integer' VARIABLE_SYMBOL '(' Expression '..' Expression ')' CodeBlock ;
LoopForEach:            'foreach my' Type VARIABLE_SYMBOL '(' ListElements ')' CodeBlock ;
LoopWhile:              'while (' Expression ')' CodeBlock ;
CodeBlock:              '{' Operation+ '}' ;

Variable:               VARIABLE_SYMBOL VariableRetrieval* ;
VariableRetrieval:      OP02_ARRAY_THINARROW Expression ']' | OP02_HASH_THINARROW Expression '}' | OP02_HASH_THINARROW WORD '}' ;
VariableDeclaration:    'my' Type VARIABLE_SYMBOL ';' | 'my' Type VARIABLE_SYMBOL OP19_VARIABLE_ASSIGN ExpressionOrStdin ';' ;
VariableModification:   Variable OP19_VARIABLE_ASSIGN ExpressionOrStdin ';' | Variable OP19_VARIABLE_ASSIGN_BY Expression ';' ;
ListElements:           ListElement (OP21_LIST_COMMA ListElement)* | OP01_NAMED_QW '(' WORD+ ')' ;
ListElement:            Expression | TypeInner Expression | KEYS_OR_VALUES HashDereferenced ;
ArrayReference:         '[' ListElements? ']' ;
ArrayDereferenced:      '@{' Variable '}' | '@{' ArrayReference '}' ;
HashEntry:              WORD OP20_HASH_FATARROW TypeInner? Expression | HashDereferenced ;
HashEntryTyped:         WORD OP20_HASH_FATARROW TypeInner Expression | HashDereferenced ;
HashReference:          '{' HashEntry (OP21_LIST_COMMA HashEntry)* '}' ;
HashDereferenced:       '%{' Variable '}' | '%{' HashReference '}' ;

#WordScoped:             WORD ('::' WORD)* ; 
WordScoped:             WORD | WORD_SCOPED;
FileHandle:             '{*' WORD '}' | 'my' 'filehandle_ref' VARIABLE_SYMBOL;
TypeInner:              'my' Type '$TYPED_' WORD OP19_VARIABLE_ASSIGN ;
Type:                   WORD ;
LoopLabel:              WORD ;
Literal:                LITERAL_STRING | LITERAL_NUMBER ;

%%

{
# Rules from Grammar.output
# NEED FIX: UPDATE!?!
my string__hash_ref $rules = {

CompileUnit_3 => 'RPerl::CompileUnit',
CompileUnit_4 => 'RPerl::CompileUnit',
Program_9 => 'RPerl::CompileUnit::Program',
Module_10 => 'RPerl::CompileUnit::Module',
Module_11 => 'RPerl::CompileUnit::Module',
Package_14 => 'RPerl::CompileUnit::Module::Package',
Subroutine_38 => 'RPerl::CodeBlock::Subroutine',
Class_52 => 'RPerl::CompileUnit::Module::Class',
Properties_55 => 'RPerl::DataStructure::Hash::Properties',
Method_60 => 'RPerl::CodeBlock::Subroutine::Method',
Operation_65 => 'RPerl::Operation',
Operation_66 => 'RPerl::Operation',
Operator_69 => 'RPerl::Operation::Expression::Operator',

}; 
    1;
}